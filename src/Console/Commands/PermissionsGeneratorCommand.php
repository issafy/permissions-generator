<?php

namespace Mouhamedfd\PermissionsGenerator\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Route;
use Spatie\Permission\Models\Permission;

class PermissionsGeneratorCommand extends Command
{
    private $found_controller = false;
    private $header =
    '    /**' . PHP_EOL.
        '     * By MouhamedFd PermissionGenerator'.PHP_EOL.
        '     */' .PHP_EOL;
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'permission:generate {--action=simulate}';
    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Generate list of permissions and perform insertion to database or controllers constructors';
    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * deelete only the header and the constructor
     * if generated by this package
     * it search for //#
     * at the beginning and at the end.
     *
     * @return void
     */

    public function deleteHeaderAndConstructor($controllerpath)
    {
        $controller_file = File::get($controllerpath);
        $controller_lines_array = explode(PHP_EOL, $controller_file);
        $output = '';
        $searched_text = 'public function __construct()//#';
        $end_searched_text = '}//#';

        $target_first_line = -1;
        $target_last_line = -1;
        foreach ($controller_lines_array as $key => $controller_line) {
            if (str_contains($controller_line, $searched_text)) {
                $target_first_line = $key;
            }
            if (str_contains($controller_line, $end_searched_text)) {
                $target_last_line = $key;
                break;
            }
        }

        echo 'Constructor to replace -> First line: '. $target_first_line.' Last Line: '.$target_last_line.PHP_EOL;
        foreach ($controller_lines_array as $key => $controller_line) {
            if ($target_first_line != -1 && $target_last_line != -1 && $key >= $target_first_line && $key <= $target_last_line) {
                $output .= "";
            } else {
                $output .= $controller_line.PHP_EOL;
            }
        }
        $output_ = str_replace($this->header, '', $output);

        File::put($controllerpath, $output_);
    }

    /**
     * Show the header depending to the action.
     *
     * @return void
     */
    public function showHeader($action)
    {
        if ($action == 'simulate') {
            echo '========='.str_pad('', 90, '.:', STR_PAD_BOTH) .'========='.PHP_EOL;
            echo '========='.str_pad('SIMULATION MODE', 90, '.:', STR_PAD_BOTH) .'========='.PHP_EOL;
            echo '========='.str_pad('', 90, '.:', STR_PAD_BOTH) .'========='.PHP_EOL;
        }
        if ($action == 'controllers') {
            echo '========='.str_pad('', 90, '.:', STR_PAD_BOTH) .'========='.PHP_EOL;
            echo '========='.str_pad('GENERATION MODE', 90, '.:', STR_PAD_BOTH) .'========='.PHP_EOL;
            echo '========='.str_pad('', 90, '.:', STR_PAD_BOTH) .'========='.PHP_EOL;
        }
        if ($action == 'database') {
            echo '========='.str_pad('', 90, '.:', STR_PAD_BOTH) .'========='.PHP_EOL;
            echo '========='.str_pad('GENERATION MODE', 90, '.:', STR_PAD_BOTH) .'========='.PHP_EOL;
            echo '========='.str_pad('', 90, '.:', STR_PAD_BOTH) .'========='.PHP_EOL;
        }
    }

    /**
     * Search for keywords in string.
     *
     * @return bool
     */
    public function haveKeywordInside($keyword_array, $to_check)
    {
        $result = false;
        foreach ($keyword_array as $key => $keyword) {
            $result = str_contains($to_check, $keyword) || $result;
        }

        return $result;
    }

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        $excluded_keywords = config('permissions-generator.excluded_keywords') ?? [];
        $have_resource_column = config('permissions-generator.have_resource_column') ?? false;
        $have_description_column = config('permissions-generator.have_description_column') ?? false;
        $middlewares = config('permissions-generator.middlewares') ?? [];
        $middleware_text = '';
        foreach ($middlewares as $key => $middleware) {
            $middleware_text.='        $this->middleware(\''.$middleware.'\');' . PHP_EOL;
        }
        // $this->middleware(['permission:insurances.index'])->only(['index', 'list']);
        $action = $this->option('action');
        $this->showHeader($action);

        $routes = Route::getRoutes();
        $routeUris = [];
        $routeAliases = [];
        $controllers = [];
        $controllerMethods = [];
        $controllerNames = [];
        $controllerPaths = [];
        $groups = [];
        foreach ($routes as $key => $route) {
            $routeUris[] = $route->uri;
            $controller = null;
            try {
                if (array_key_exists('controller', $route->action) && array_key_exists('as', $route->action)) {
                    $controller = $route->action['controller'];
                    $controllers[] = $controller;
                    $controllerPath = explode('@', $controller)[0];
                    $controllerPaths[] = $controllerPath;
                    $controllerMethod = explode('@', $controller)[1];
                    $controllerPathArray = explode('\\', $controllerPath);
                    $controllerName = $controllerPathArray[count($controllerPathArray) - 1];
                    $controllerNames[] = $controllerName;
                    $controllerMethods[] = $controllerMethod;
                    $alias = $route->action['as'];
                    $routeAliases[] = $alias;
                    $group = explode('.', $alias)[0];
                    if ( ! in_array($group, $groups)) {
                        $groups[] = $group;
                    }
                } else {
                    $controllers[] = null;
                    $controllerMethods[] = null;
                    $routeAliases[] = null;
                    $controllerNames[] = null;
                    $controllerPaths[] = null;
                }
            } catch (\Exception $e) {
            }
        }

        $controllerNameTemp = '';
        $to_insert = '';

        for ($i = 0; $i < count($controllerMethods); $i++) {
            if (
                $controllerMethods[$i] != null
                && $routeAliases[$i] != null
                && count(explode('.', $routeAliases[$i])) >= 2
                && $routeAliases[$i] != null
                && $controllerNames[$i] != null
                && ! $this->haveKeywordInside($excluded_keywords, $controllerPaths[$i])
            ) {
                $controllerName = $controllerNames[$i];
                $path = str_replace('App', 'app', str_replace('\\', '/', base_path($controllerPaths[$i] . '.php')));
                //A new controller [pre checked]
                if ($controllerNameTemp != $controllerName) {
                    //for information and processing purpose
                    $this->found_controller = false;
                    echo '========='.str_pad($controllerName, 90, '.:', STR_PAD_BOTH).'========='.PHP_EOL;
                    echo '#########'.str_pad($path, 90, ".:", STR_PAD_BOTH).'#########'.PHP_EOL;
                    try {
                        //display the search term
                        $search = 'class ' .$controllerNames[$i].' extends Controller'.PHP_EOL.'{'. PHP_EOL;
                        echo 'SEARCH TERM:' .$search . PHP_EOL;
                        $file_txt = '';
                        $file_txt = File::get($path);

                        //search for the controller declaration
                        if (str_contains($file_txt, $search)) {
                            $this->found_controller = true;
                            echo "Pattern Found" . PHP_EOL;
                            $to_insert = $search . $this->header . "    public function __construct()//#" . PHP_EOL . "    {" . PHP_EOL;
                            $to_insert.=$middleware_text;
                        } else {
                            echo "Pattern Not Found" . PHP_EOL;
                            $this->found_controller = false;
                        }
                    } catch (\Exception $e) {
                        echo "cannot read file" . PHP_EOL;
                        $this->found_controller = false;
                    }
                    $controllerNameTemp = $controllerName;
                }

                $permissionString = '        $' . "this->middleware(['permission:" . $routeAliases[$i] . "'])->only(['" . $controllerMethods[$i] . "']);";
                $to_insert .= $permissionString . PHP_EOL;

                //check if it's  the last before the next controllerMethod or the last method
                //the test is to close the brace for the constructor and to insert the code in the controller
                if (($i <= count($controllerMethods) - 2 && $controllerNames[$i] != $controllerNames[$i + 1]) || ($i == count($controllerMethods) - 1)) {
                    $to_insert .= "    }//#" . PHP_EOL;
                    echo $to_insert;
                    if ($this->found_controller) {
                        echo "Controller Found" . PHP_EOL;
                    }
                    echo "PATH:" . $path . PHP_EOL;
                    if ($action == 'controllers' && $this->found_controller) {
                        $this->deleteHeaderAndConstructor($path);
                        $file_txt = File::get($path);
                        $result_txt = str_replace($search, $to_insert, $file_txt);
                        File::put($path, $result_txt);
                    }
                }

                //if we choose database action corresponding Permissions will be created
                if ($action == 'database' && $this->found_controller) {
                    $alias = $routeAliases[$i];
                    $permission = Permission::where('name', $alias)->first();
                    if (!$permission) {
                        $permission = new Permission;
                        $permission->name = $alias;
                    }
                    if ($have_resource_column) {
                        //Only if you add resource column to your permission table
                        $permission->resource = explode(".", $alias)[0];
                    }
                    if ($have_description_column) {
                        //Only if you add description column to your permission table
                        $permission->description = 'Permission for ' . $controllerNames[$i] . ' action :' . $controllerMethods[$i];
                    }
                    $permission->guard_name = 'web';
                    $permission->save();
                }
            }
        }

        return 0;
    }
}
